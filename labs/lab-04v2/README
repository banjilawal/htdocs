1. PURPOSE
-----------
Unfortunately I do not have time to document my code much. This document outlines the architechtural decisions to make it easier
for me and other developers to understand the design philosophy so they can get more up to speed.

2. ARCHITECHTURE
-----------------
The site is used for ordering shoes.  Right now mainly sneakers.  To make it easier to manage all the PHP code passes the data 
through a series of classes.  The classes are generally in file whose name is a single word.

2.1 Class Definition Files
---------------------------
These are:
    i.  generator.php
    ii. rating.php 
    iii. order.php

These hold the cless definitions for various objects and their collections.

2.1.1 Generator.php:
--------------------
Helper functions and classes for ShoeSize, Shoe, Brand, and their collections ShoeSizes and Shoes.
The classes tend to include a method for displaying the fields in tabular form as well as strings.
The Shoes collection has some rudimentary search.

2.1.2 Rating.php:
-----------------
A rating is attached to a particular shoe.  In and of itself a single rating is not that useful to 
us but putting.  However when a Ratings collection class is written we can add the Ratings to a shoe
model and view its' statistics.

2.1.3 Order.php:
-----------------
To complete an order we need
    * The Shoe
    * The size
    * The quantity
With this information the Order class calcualates the tax and total owed.  Unfortunately did not have time to 
implement the features I wrote in assignments 2 and 3.

3. The Shoe Transaction Process
-------------------------------
1.  Customer views table of shoes which is randomly generated.
    i.  They can reorder the table's data in order highest or lowest price.
2.  When customer clicks on a table row they are brought to the shoe's page
3.  On the shoe page generated by (shoe.php) they will see again the metadata about the shoe 
    along with two actions
    i.  Give a review
    ii. Submit an order

4.  TODOS
---------
1.  I had to use $_SESSION array to pass data back and forth.  Not entirely happy with that.  There might be a better way.
2.  Wanted to use the FETCH API to pass data fromt the different forms an clickable non-form elements (table rows) but I could
    not get the archaic AJAX API working (my limitations).  I also had no success with the FETCH API for passing the client side 
    information back to the server so I ended up using a cookie.
3.  Instead of using two global arrays $_SESSION and $_COOKIE, along with $_POST or $_GET would prefer one global array I can use
    Further research is needed to figure out how to do that.
4.  Create header.php with dynamic content
5.  Create Navigation pane with options for:
    i.  Registering as new customer
    ii. Viewing status of open orders
    iii. Changing, cancelling, or returning orders
    iv. Updating personal information
    v.  Viewing previous orders


5. CONCLUSION
-------------
The biggest challenge of this assignment is the problem I had since asignment 2 figuring out how to send information to the server
side when you have a large collection of things.  I did not want the user to scroll all the way to the bottom of the page to submit
an order or review and just wanted them to be able to click on a link and bring them to their item's page with a menu of actions.
That seemed more intuitive to me and the other methods I was aware of (a large button group), (an table full of forms for individual
shoes in iframes) seemd untenable.  The most intuitive and easier preference for humans was a little bit hard for me to write
but I finally figured it out.  


